version: "3.0"
services:
  # Laravel backend
  laravel:
    build:
      context: ./laravel
      args:
        PHP_VERSION: ${PHP_VERSION}
      dockerfile: laravel.dockerfile
    image: laravel
    user: "1000:1000"
    container_name: laravel
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: laravel
      SERVICE_TAGS: dev
    working_dir: /var/www/html/
    volumes:
      - ./laravel:/var/www/html/
      - ./laravel/php/laravel.ini:/usr/local/etc/php/conf.d/laravel.ini
    networks:
      - app-network
    links:
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: laravel

  # Supervisord for restarting the queue workers
  supervisor:
    container_name: supervisor
    build:
      context: ./supervisor
      args:
        PHP_VERSION: ${PHP_VERSION}
      dockerfile: supervisord.dockerfile
    restart: unless-stopped
    environment:
      APP_ROOT: ${SUPERVISOR_APP_ROOT}
      QUEUE_DRIVER: ${SUPERVISOR_QUEUE_CONNECTION}
      OPTIONS: ${SUPERVISOR_QUEUE_OPTIONS}
      NUM_PROCS: ${SUPERVISOR_NUM_PROCS}
    volumes:
      - ./laravel:/${SUPERVISOR_APP_ROOT}
    networks:
      - app-network
    links:
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: supervisor

  # Vue frontent, in development node server is used, in production nginx
  vue:
    stdin_open: true
    container_name: vue
    restart: always
    build:
      context: ./vue
      dockerfile: vue.dockerfile
    volumes:
      - ./vue:/app
      - /app/node_modules/
    networks:
      - app-network
    environment:
      - CHOKIDAR_USEPOLLING=true
    expose:
      - "80"
    ports:
      - "8080:8080"
      - "8081:8081"
    links:
      - fluentd
    # logging:
    #   driver: "fluentd"
    #   options:
    #     fluentd-address: localhost:24224
    #     tag: vue

  # Nginx
  webserver:
    depends_on:
      - laravel
      - vue
    build:
      context: ./laravel/nginx
      dockerfile: nginx.dockerfile
    container_name: nginx
    restart: unless-stopped
    tty: true
    ports:
      - "80:80"
    networks:
      - app-network
    links:
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: webserver

  # Mysql
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    tty: true
    ports:
      - "33061:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - databasevolume:/var/lib/mysql
    networks:
      - app-network
    links:
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: mysql

  # Redis
  redis:
    image: "redis"
    container_name: redis
    command: redis-server
    ports:
      - "6379:6397"
    volumes:
      - ./redis/data:/data
      - ./redis/conf:/usr/local/etc/redis/redis.conf
    networks:
      - app-network
    links:
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: localhost:24224
        tag: redis

  # Mailhog for testing email during development
  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    networks:
      - app-network

  # Fluentd will collect logs from the other containers
  fluentd:
    container_name: fluentd
    build:
      context: ./fluentd
      dockerfile: fluentd.dockerfile
    volumes:
      - ./fluentd/conf:/fluentd/etc
    links:
      - "mongodb"
    environment:
      MONGO_USER: ${MONGO_USER}
      MONGO_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - app-network

  # The logs that fluentd collects are stored in mongodb
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    restart: unless-stopped
    hostname: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    ports:
      - 27017:27017
    volumes:
      - mongodb:/data/db
    networks:
      - app-network

# Networks
networks:
  app-network:
    driver: bridge

# Volumes
volumes:
  databasevolume:
  mongodb:
